{
  "comment" : "It's the main item required to connect to the Bandyer platform.",
  "fields" : {
    "myAlias" : {
      "comment" : "My user userAlias.",
      "tags" : { }
    },
    "state" : {
      "comment" : "Bandyer SDK Client state.",
      "tags" : { }
    },
    "modules" : {
      "comment" : "Returns all the initialized modules.",
      "tags" : {
        "since" : "v1.1.8"
      }
    },
    "callModule" : {
      "comment" : "Returns call module if it has been initialized.",
      "tags" : {
        "since" : "v1.3.0"
      }
    },
    "chatModule" : {
      "comment" : "Returns chat module if it has been initialized.",
      "tags" : {
        "since" : "v1.3.0"
      }
    }
  },
  "methods" : {
    "init" : {
      "comment" : "Initialize Bandyer SDK Client.",
      "parameters" : {
        "userAlias" : "user userAlias to login with.",
        "options" : "BandyerSDKClientOptions."
      },
      "tags" : {
        "parameters" : "BandyerSDKClientOptions."
      }
    },
    "resume" : {
      "comment" : "Resume all Bandyer SDK.",
      "parameters" : { },
      "tags" : { }
    },
    "pause" : {
      "comment" : "Pause all Bandyer SDK.",
      "parameters" : { },
      "tags" : { }
    },
    "startListening" : {
      "comment" : "Starts listening for events such as incoming calls and incoming chat messages.",
      "parameters" : { },
      "tags" : { }
    },
    "stopListening" : {
      "comment" : "Stops listening for events such as incoming calls and incoming chat messages.",
      "parameters" : { },
      "tags" : { }
    },
    "addObserver" : {
      "comment" : "Add observer to be notified when Bandyer SDK is up and running.",
      "parameters" : {
        "bandyerSDKClientObserver" : "BandyerSDKClientObserver"
      },
      "tags" : {
        "parameters" : "BandyerSDKClientObserver"
      }
    },
    "removeObserver" : {
      "comment" : "Remove observer from Bandyer SDK.",
      "parameters" : {
        "bandyerSDKClientObserver" : "BandyerSDKClientObserver"
      },
      "tags" : {
        "parameters" : "BandyerSDKClientObserver"
      }
    },
    "removeModuleObserver" : {
      "comment" : "Remove module observer from Bandyer SDK.",
      "parameters" : {
        "bandyerModuleObserver" : "BandyerModuleObserver"
      },
      "tags" : {
        "parameters" : "BandyerModuleObserver"
      }
    },
    "addModuleObserver" : {
      "comment" : "Add module observer to listen for modules changes.",
      "parameters" : {
        "bandyerModuleObserver" : "BandyerModuleObserver"
      },
      "tags" : {
        "parameters" : "BandyerModuleObserver"
      }
    },
    "removeObservers" : {
      "comment" : "Remove all previously added observers",
      "parameters" : { },
      "tags" : { }
    },
    "handleNotification" : {
      "comment" : "Handle notification payload and restart Bandyer SDK if needed.",
      "parameters" : {
        "context" : "Context",
        "payload" : "notification data."
      },
      "tags" : {
        "parameters" : "notification data.",
        "since" : "changed in v1.1.0"
      }
    },
    "clearUserCache" : {
      "comment" : "Call this method to clear all the saved data!",
      "parameters" : { },
      "tags" : {
        "since" : "v1.0.1"
      }
    },
    "dispose" : {
      "comment" : "Destroy Bandyer SDK operations.",
      "parameters" : { },
      "tags" : { }
    },
    "hasFailedWithThrowable" : {
      "comment" : "Check if the throwable belongs to the component.",
      "parameters" : {
        "throwable" : "Throwable exception to be checked."
      },
      "tags" : {
        "parameters" : "Throwable exception to be checked.",
        "return" : "Boolean true if the throwable has been generated from the component, false otherwise."
      }
    },
    "getFailureRecoveryStrategy" : {
      "comment" : "",
      "parameters" : {
        "throwable" : "Throwable the exception that occurred inside the component."
      },
      "tags" : {
        "parameters" : "Throwable the exception that occurred inside the component.",
        "return" : "FailureRecoverStrategy strategy to be applied after the component's recovery process has run."
      }
    },
    "onPreRecovery" : {
      "comment" : "Perform needed operation after an exception has been produced from the component.",
      "parameters" : {
        "recoverStrategy" : "the recover strategy that will be applied for this component.",
        "throwable" : "Throwable the exception that occurred inside the component."
      },
      "tags" : {
        "parameters" : "Throwable the exception that occurred inside the component."
      }
    }
  }
}